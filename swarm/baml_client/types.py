###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing import Dict, Generic, List, Literal, Optional, TypeVar, Union


T = TypeVar('T')
CheckName = TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str

class Checked(BaseModel, Generic[T,CheckName]):
    value: T
    checks: Dict[CheckName, Check]

def get_checks(checks: Dict[CheckName, Check]) -> List[Check]:
    return list(checks.values())

def all_succeeded(checks: Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))



class AgentName(str, Enum):
    
    GeneralAgent = "GeneralAgent"
    StockAlertAgent = "StockAlertAgent"
    OrderAndShipmentAgent = "OrderAndShipmentAgent"
    VerificationAgent = "VerificationAgent"
    InappropriateContentAgent = "InappropriateContentAgent"
    ReturnsAgent = "ReturnsAgent"

class SecurityMetric(str, Enum):
    
    MaliciousContent = "MaliciousContent"
    Spam = "Spam"
    Threat = "Threat"
    InappropriateRequest = "InappropriateRequest"
    ContextualRelevance = "ContextualRelevance"
    CompetitorMention = "CompetitorMention"

class Analysis(BaseModel):
    metrics: List["SecurityMetric"]
    details: str

class Evaluation(BaseModel):
    agent: "AgentName"
    analysis: "Analysis"

class Event(BaseModel):
    originator: str
    event: str
    tool_name: Optional[str] = None
    content: Optional[str] = None
    arguments: Optional[str] = None
