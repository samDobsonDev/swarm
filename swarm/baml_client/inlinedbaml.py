###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "test.baml": "generator target {\r\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\"\r\n    output_type \"python/pydantic\"\r\n    \r\n    // Where the generated code will be saved (relative to baml_src/)\r\n    output_dir \"../\"\r\n    \r\n    // What interface you prefer to use for the generated code (sync/async)\r\n    // Both are generated regardless of the choice, just modifies what is exported\r\n    // at the top level\r\n    default_client_mode \"sync\"\r\n    \r\n    // Version of runtime to generate code for (should match installed baml-py version)\r\n    version \"0.67.0\"\r\n}\r\n\r\nclient<llm> GPT4o {\r\n  provider openai\r\n  options {\r\n    model gpt-4o\r\n    api_key env.OPENAI_API_KEY\r\n  }\r\n} \r\n\r\nenum MyClass {\r\n    Refund @alias(\"k1\")\r\n    @description(\"Customer wants to refund a product\")\r\n\r\n    CancelOrder @alias(\"k2\")\r\n    @description(\"Customer wants to cancel an order\")\r\n\r\n    TechnicalSupport @alias(\"k3\")\r\n    @description(\"Customer needs help with a technical issue unrelated to account creation or login\")\r\n\r\n    AccountIssue @alias(\"k4\")\r\n    @description(\"Specifically relates to account-login or account-creation\")\r\n\r\n    Question @alias(\"k5\")\r\n    @description(\"Customer has a question\")\r\n}\r\n\r\nfunction ClassifyMessageWithSymbol(input: string) -> MyClass {\r\n  client GPT4o\r\n\r\n  prompt #\"\r\n    Classify the following INPUT into ONE\r\n    of the following categories:\r\n\r\n    INPUT: {{ input }}\r\n\r\n    {{ ctx.output_format }}\r\n\r\n    Response:\r\n  \"#\r\n}\r\n\r\ntest Test1 {\r\n  functions [ClassifyMessageWithSymbol]\r\n  args {\r\n    input \"I can't access my account using my login credentials. I havent received the promised reset password email. Please help.\"\r\n  }\r\n}",
}

def get_baml_files():
    return file_map